#include "../side/screen_capture_lite/include/ScreenCapture.h"
#include "../side/screen_capture_lite/include/ScreenCapture_C_API.h"


void CaptureWindowScreenshotByName(std::string_view name)
{
    auto windows = SL::Screen_Capture::SCL_GetWindows();
    auto window = std::find_if(windows.begin(), windows.end(), [&](const auto &w) {
        return w.Name == name;
    });

    if (window == windows.end())
    {
        std::cerr << "Window with name " << name << " not found!" << std::endl;
        return;
    }

    auto image = SL::Screen_Capture::SCL_GetWindowFrame(*window);
    if (image)
    {
        std::string filename = name + ".png";
        lodepng::encode(filename, image->data(), image->width(), image->height());
        std::cout << "Screenshot saved to " << filename << std::endl;
    }
    else
    {
        std::cerr << "Failed to take screenshot of window " << name << std::endl;
    }
}

void TestCopyContiguous()
{

    constexpr auto VALID(static_cast<unsigned char>(0xFF));
    constexpr auto INVALID(static_cast<unsigned char>(0xFE));
    constexpr auto PIXEL_DEPTH(sizeof(SL::Screen_Capture::ImageBGRA));
    constexpr unsigned WIDTH(256), HEIGHT(256);

    std::vector<SL::Screen_Capture::ImageBGRA> strided;

    for (unsigned row(0); row < HEIGHT; ++row) {
        for (unsigned col(0); col < WIDTH; ++col) {
            strided.push_back(SL::Screen_Capture::ImageBGRA{VALID, VALID, VALID, VALID});
        }
    }

    auto bytes = strided.size() * PIXEL_DEPTH;
    std::vector<unsigned char> contiguous(bytes, static_cast<unsigned char>(0));
    auto image = SL::Screen_Capture::Image{{0, 0, WIDTH, HEIGHT}, 0, true, strided.data()};

    auto result = SCL_Utility_CopyToContiguous(contiguous.data(), &image);
    auto distance = std::distance(contiguous.data(), static_cast<unsigned char *>(result));

    if (distance != (WIDTH * HEIGHT * PIXEL_DEPTH))
        std::abort();

    auto const begin(contiguous.begin()), end(contiguous.end());

    for (auto current(begin); current != end; ++current) {
        if (*current != VALID)
            std::abort();
    }
}

void TestCopyNonContiguous()
{

    constexpr auto VALID(static_cast<unsigned char>(0xFF));
    constexpr auto INVALID(static_cast<unsigned char>(0xFE));
    constexpr auto PIXEL_DEPTH(sizeof(SL::Screen_Capture::ImageBGRA));
    constexpr unsigned WIDTH(256), HEIGHT(256), PADDING(64), STRIDE_IN_BYTES((WIDTH + PADDING) * PIXEL_DEPTH);

    std::vector<SL::Screen_Capture::ImageBGRA> strided;

    for (unsigned row(0); row < HEIGHT; ++row) {

        for (unsigned col(0); col < WIDTH; ++col) {
            strided.push_back(SL::Screen_Capture::ImageBGRA{VALID, VALID, VALID, VALID});
        }

        for (unsigned pad(0); pad < PADDING; ++pad) {
            strided.push_back(SL::Screen_Capture::ImageBGRA{INVALID, INVALID, INVALID, INVALID});
        }
    }

    auto bytes = strided.size() * PIXEL_DEPTH;
    std::vector<unsigned char> contiguous(bytes, static_cast<unsigned char>(0));
    auto image = SL::Screen_Capture::Image{{0, 0, WIDTH, HEIGHT}, STRIDE_IN_BYTES, false, strided.data()};

    auto result = SCL_Utility_CopyToContiguous(contiguous.data(), &image);
    auto distance = std::distance(contiguous.data(), static_cast<unsigned char *>(result));

    // Ensures that the pointer incremented by only the amount written.
    if (distance != (WIDTH * HEIGHT * PIXEL_DEPTH))
        std::abort();

    auto const begin(contiguous.begin());
    auto contiguousEnd(begin), absoluteEnd(contiguous.end());

    std::advance(contiguousEnd, WIDTH * HEIGHT * PIXEL_DEPTH);

    for (auto current(begin); current != contiguousEnd; ++current) {
        if (*current != VALID)
            std::abort();
    }

    for (auto current(contiguousEnd); current != absoluteEnd; ++current) {
        if (*current != 0)
            std::abort();
    }
}

void ExtractAndConvertToRGBA(const SL::Screen_Capture::Image &img, unsigned char *dst, size_t dst_size)
{
    assert(dst_size >= static_cast<size_t>(SL::Screen_Capture::Width(img) * SL::Screen_Capture::Height(img) * sizeof(SL::Screen_Capture::ImageBGRA)));
    auto imgsrc = StartSrc(img);
    auto imgdist = dst;
    for (auto h = 0; h < Height(img); h++) {
        auto startimgsrc = imgsrc;
        for (auto w = 0; w < Width(img); w++) {
            *imgdist++ = imgsrc->R;
            *imgdist++ = imgsrc->G;
            *imgdist++ = imgsrc->B;
            *imgdist++ = 0; // alpha should be zero
            imgsrc++;
        }
        imgsrc = SL::Screen_Capture::GotoNextRow(img, startimgsrc);
    }
}



using namespace std::chrono_literals;
std::shared_ptr<SL::Screen_Capture::IScreenCaptureManager> framgrabber;
std::atomic<int> realcounter;
std::atomic<int> onNewFramecounter;

inline std::ostream &operator<<(std::ostream &os, const SL::Screen_Capture::ImageRect &p)
{
    return os << "left=" << p.left << " top=" << p.top << " right=" << p.right << " bottom=" << p.bottom;
}
inline std::ostream &operator<<(std::ostream &os, const SL::Screen_Capture::Monitor &p)
{
    return os << "Id=" << p.Id << " Index=" << p.Index << " Height=" << p.Height << " Width=" << p.Width << " OffsetX=" << p.OffsetX
              << " OffsetY=" << p.OffsetY << " Name=" << p.Name;
}

auto onNewFramestart = std::chrono::high_resolution_clock::now();
void createframegrabber()
{
    realcounter = 0;
    onNewFramecounter = 0;
    framgrabber = nullptr;
    framgrabber =
        SL::Screen_Capture::CreateCaptureConfiguration([]() {
            auto mons = SL::Screen_Capture::GetMonitors();
            std::cout << "Library is requesting the list of monitors to capture!" << std::endl;
            for (auto &m : mons) {
                std::cout << m << std::endl;
            }
            return mons;
        })
            ->onFrameChanged([&](const SL::Screen_Capture::Image &img, const SL::Screen_Capture::Monitor &monitor) {
                // std::cout << "Difference detected!  " << img.Bounds << std::endl;
                // Uncomment the below code to write the image to disk for debugging
                /*
                        auto r = realcounter.fetch_add(1);
                        auto s = std::to_string(r) + std::string("MONITORDIF_") + std::string(".jpg");
                        auto size = Width(img) * Height(img) * sizeof(SL::Screen_Capture::ImageBGRA);
                         auto imgbuffer(std::make_unique<unsigned char[]>(size));
                         ExtractAndConvertToRGBA(img, imgbuffer.get(), size);
                         tje_encode_to_file(s.c_str(), Width(img), Height(img), 4, (const unsigned char*)imgbuffer.get());
                */
            })
            ->onNewFrame([&](const SL::Screen_Capture::Image &img, const SL::Screen_Capture::Monitor &monitor) {
                // Uncomment the below code to write the image to disk for debugging

                // auto r = realcounter.fetch_add(1);
                // auto s = std::to_string(r) + std::string("MONITORNEW_") + std::string(".jpg");
                // auto size = Width(img) * Height(img) * sizeof(SL::Screen_Capture::ImageBGRA);
                // auto imgbuffer(std::make_unique<unsigned char[]>(size));
                // ExtractAndConvertToRGBA(img, imgbuffer.get(), size);
                // tje_encode_to_file(s.c_str(), Width(img), Height(img), 4, (const unsigned char *)imgbuffer.get());

                if (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now() - onNewFramestart).count() >=
                    1000) {
                    std::cout << "onNewFrame fps" << onNewFramecounter << std::endl;
                    onNewFramecounter = 0;
                    onNewFramestart = std::chrono::high_resolution_clock::now();
                }
                onNewFramecounter += 1;
            })
            ->onMouseChanged([&](const SL::Screen_Capture::Image *img, const SL::Screen_Capture::MousePoint &mousepoint) {
                // Uncomment the below code to write the image to disk for debugging
                /*
                        auto r = realcounter.fetch_add(1);
                        auto s = std::to_string(r) + std::string(" M") + std::string(".png");
                        if (img) {
                            std::cout << "New mouse coordinates  AND NEW Image received."
                                      << " x= " << mousepoint.Position.x << " y= " << mousepoint.Position.y << std::endl;
                            lodepng::encode(s, (unsigned char *)StartSrc(*img), Width(*img), Height(*img));
                        }
                        else {
                            std::cout << "New mouse coordinates received."
                                      << " x= " << mousepoint.Position.x << " y= " << mousepoint.Position.y
                                      << " The mouse image is still the same as the last " << std::endl;
                        }

                */
            })
            ->start_capturing();

    framgrabber->setFrameChangeInterval(std::chrono::milliseconds(100));
    framgrabber->setMouseChangeInterval(std::chrono::milliseconds(100));
}

auto getWindowToCapture(std::string window_to_search_for = "blizzard")
{
    auto windows = SL::Screen_Capture::GetWindows();
    // convert to lower case for easier comparisons
    std::transform(window_to_search_for.begin(), window_to_search_for.end(), window_to_search_for.begin(),
                   [](char c) { return std::tolower(c, std::locale()); });
    decltype(windows) filtereditems;
    for (auto &a : windows) {
        std::string name = a.Name;
        std::transform(name.begin(), name.end(), name.begin(), [](char c) { return std::tolower(c, std::locale()); });
        if (name.find(window_to_search_for) != std::string::npos) {
            filtereditems.push_back(a);
            std::cout << "ADDING WINDOW  Height " << a.Size.y << "  Width  " << a.Size.x << "   " << a.Name << std::endl;
        }
    }

    return filtereditems;
}


void createwindowgrabber()
{
    auto w = getWindowToCapture();
    if (w.empty()) {
        std::cout << "In order to test window capturing, you must modify the getWindowToCapture() function to search for a window that actually exists!" << std::endl;
        return;
    }
    realcounter = 0;
    onNewFramecounter = 0;
    framgrabber = nullptr;
    framgrabber =
        SL::Screen_Capture::CreateCaptureConfiguration([]() {
            auto filtereditems = getWindowToCapture();
            return filtereditems;
        })

            ->onNewFrame([&](const SL::Screen_Capture::Image &img, const SL::Screen_Capture::Window &window) {
                // Uncomment the below code to write the image to disk for debugging

                /*
                auto r = realcounter.fetch_add(1);
                 auto s = std::to_string(r) + std::string("WINNEW_") + std::string(".jpg");
                 auto size = Width(img) * Height(img) * sizeof(SL::Screen_Capture::ImageBGRA);
                  auto imgbuffer(std::make_unique<unsigned char[]>(size));
                  ExtractAndConvertToRGBA(img, imgbuffer.get(), size);
                  tje_encode_to_file(s.c_str(), Width(img), Height(img), 4, (const unsigned char*)imgbuffer.get());
                  */

                if (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now() - onNewFramestart).count() >=
                    1000) {
                    std::cout << "onNewFrame fps" << onNewFramecounter << std::endl;
                    onNewFramecounter = 0;
                    onNewFramestart = std::chrono::high_resolution_clock::now();
                }
                onNewFramecounter += 1;
            })
            ->onMouseChanged([&](const SL::Screen_Capture::Image *img, const SL::Screen_Capture::MousePoint &mousepoint) {
                // Uncomment the below code to write the image to disk for debugging
                /*
                auto r = realcounter.fetch_add(1);
                auto s = std::to_string(r) + std::string(" M") + std::string(".png");
                if (img) {
                    std::cout << "New mouse coordinates  AND NEW Image received."
                              << " x= " << mousepoint.Position.x << " y= " << mousepoint.Position.y << std::endl;
                    lodepng::encode(s, (unsigned char *)StartSrc(*img), Width(*img), Height(*img));
                }
                else {
                    std::cout << "New mouse coordinates received."
                              << " x= " << mousepoint.Position.x << " y= " << mousepoint.Position.y << " The mouse image is still the same as the last
                "
                              << std::endl;
                }
                */
            })
            ->start_capturing();

    framgrabber->setFrameChangeInterval(std::chrono::milliseconds(100));
    framgrabber->setMouseChangeInterval(std::chrono::milliseconds(100));
}
